
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000011d6  0000126a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080010e  0080010e  00001278  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000181  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e1  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cb  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000877  00000000  00000000  000027c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025f  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dc6  00000000  00000000  000033eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  000041b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__ctors_end>
       4:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
       8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
       c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      10:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      14:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      18:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      1c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      20:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      24:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_9>
      28:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      2c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      30:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      34:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      38:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      3c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      40:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      44:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      48:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      4c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      50:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      54:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      58:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      5c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      60:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>
      64:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__bad_interrupt>

00000068 <mnth>:
      68:	20 20 20 4a 41 4e 46 45 42 4d 41 52 41 50 52 4d        JANFEBMARAPRM
      78:	41 59 4a 55 4e 4a 55 4c 41 55 47 53 45 50 4f 43     AYJUNJULAUGSEPOC
      88:	54 4e 4f 56 44 45 43                                TNOVDEC

0000008f <chars>:
      8f:	00 00 00 00 00 00 00 00 04 04 04 04 04 00 04 00     ................
      9f:	12 12 12 00 00 00 00 00 00 05 1f 0a 1f 14 00 00     ................
      af:	0e 15 14 0e 05 15 0e 00 18 19 02 04 08 13 03 00     ................
      bf:	0e 12 14 08 15 12 0d 00 04 04 04 00 00 00 00 00     ................
      cf:	02 04 08 08 08 04 02 00 08 04 02 02 02 04 08 00     ................
      df:	04 05 16 0c 0a 11 00 00 00 04 04 1f 04 04 00 00     ................
      ef:	00 00 00 0c 0c 04 08 00 00 00 00 1f 00 00 00 00     ................
      ff:	00 00 00 00 00 0c 0c 00 00 01 02 04 08 10 00 00     ................
     10f:	0e 11 13 15 19 11 0e 00 04 0c 04 04 04 04 0e 00     ................
     11f:	0e 11 01 02 04 08 1f 00 0e 11 01 02 01 11 0e 00     ................
     12f:	03 05 09 11 1f 01 01 00 1f 10 1e 01 01 11 0e 00     ................
     13f:	0e 11 10 1e 11 11 0e 00 1f 11 01 02 04 08 08 00     ................
     14f:	0e 11 11 0e 11 11 0e 00 0e 11 11 0f 01 11 0e 00     ................
     15f:	00 0c 0c 00 0c 0c 00 00 0c 0c 00 0c 0c 04 08 00     ................
     16f:	01 02 04 08 04 02 01 00 00 00 1f 00 1f 00 00 00     ................
     17f:	10 08 04 02 04 08 10 00 0e 11 11 02 04 00 04 00     ................
     18f:	0e 11 17 16 10 10 0f 00 0e 11 11 11 1f 11 11 00     ................
     19f:	1e 11 11 1e 11 11 1e 00 0e 11 10 10 10 11 0e 00     ................
     1af:	1e 11 11 11 11 11 1e 00 1f 10 10 1e 10 10 1f 00     ................
     1bf:	1f 10 10 1e 10 10 10 00 0e 11 10 10 17 11 0e 00     ................
     1cf:	11 11 11 1f 11 11 11 00 0e 04 04 04 04 04 0e 00     ................
     1df:	1f 01 01 01 01 11 0e 00 11 12 14 18 14 12 11 00     ................
     1ef:	10 10 10 10 10 11 1f 00 11 1b 15 11 11 11 11 00     ................
     1ff:	11 11 19 15 13 11 11 00 0e 11 11 11 11 11 0e 00     ................
     20f:	1e 11 11 1e 10 10 10 00 0c 12 12 1a 16 16 0d 00     ................
     21f:	1e 11 11 1e 14 12 11 00 0e 11 10 0e 01 11 0e 00     ................
     22f:	1f 15 04 04 04 04 04 00 11 11 11 11 11 11 0e 00     ................
     23f:	11 11 11 11 11 0a 04 00 11 11 11 15 15 15 0a 00     ................
     24f:	11 11 0a 04 0a 11 11 00 11 11 0a 04 04 04 04 00     ................
     25f:	1f 01 02 04 08 10 1f 00 0c 08 08 08 08 08 0c 00     ................
     26f:	00 10 08 04 02 01 00 00 0c 04 04 04 04 04 0c 00     ................
     27f:	04 0a 11 00 00 00 00 00 00 00 00 00 00 00 1f 00     ................
     28f:	08 04 02 00 00 00 00 00 00 00 0d 13 11 13 0d 00     ................
     29f:	10 10 16 19 11 19 16 00 00 00 0e 11 10 11 0e 00     ................
     2af:	01 01 0d 13 11 13 0d 00 00 00 0e 11 1f 10 0f 00     ................
     2bf:	06 09 08 1c 08 08 08 00 00 00 0f 11 0f 01 1e 00     ................
     2cf:	10 10 10 1c 12 12 12 00 04 00 04 04 04 04 04 00     ................
     2df:	02 00 02 02 02 12 0c 00 10 10 12 14 18 14 12 00     ................
     2ef:	04 04 04 04 04 04 04 00 00 00 1e 15 15 15 15 00     ................
     2ff:	00 00 1c 12 12 12 12 00 00 00 0e 11 11 11 0e 00     ................
     30f:	00 00 1e 11 1e 10 10 00 00 00 0f 11 0f 01 01 00     ................
     31f:	00 00 16 19 10 10 10 00 00 00 0f 10 0e 01 1e 00     ................
     32f:	08 08 1c 08 08 09 06 00 00 00 11 11 11 11 0f 00     ................
     33f:	00 00 11 11 11 0a 04 00 00 00 11 15 15 15 0a 00     ................
     34f:	00 00 11 0a 04 0a 11 00 00 00 11 09 06 04 18 00     ................
     35f:	00 00 1f 02 04 08 1f 00 0c 12 12 0c 00 00 00 00     ................
     36f:	1e 33 33 33 33 33 33 1e 0c 1c 0c 0c 0c 0c 0c 1e     .333333.........
     37f:	1e 33 03 06 0c 18 31 3f 1e 33 03 06 03 03 33 1e     .3....1?.3....3.
     38f:	03 07 0f 1b 33 3f 03 03 3f 30 30 3e 03 03 33 1e     ....3?..?00>..3.
     39f:	1e 33 30 3e 33 33 33 1e 3f 33 03 06 0c 18 18 18     .30>333.?3......
     3af:	1e 33 33 1e 33 33 33 1e 1e 33 33 33 1f 03 33 1e     .33.333..333..3.
     3bf:	00                                                  .

000003c0 <__ctors_end>:
     3c0:	11 24       	eor	r1, r1
     3c2:	1f be       	out	0x3f, r1	; 63
     3c4:	cf ef       	ldi	r28, 0xFF	; 255
     3c6:	d8 e0       	ldi	r29, 0x08	; 8
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	cd bf       	out	0x3d, r28	; 61

000003cc <__do_copy_data>:
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b1 e0       	ldi	r27, 0x01	; 1
     3d2:	e6 ed       	ldi	r30, 0xD6	; 214
     3d4:	f1 e1       	ldi	r31, 0x11	; 17
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <.do_copy_data_start>

000003d8 <.do_copy_data_loop>:
     3d8:	05 90       	lpm	r0, Z+
     3da:	0d 92       	st	X+, r0

000003dc <.do_copy_data_start>:
     3dc:	ae 30       	cpi	r26, 0x0E	; 14
     3de:	b1 07       	cpc	r27, r17
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <.do_copy_data_loop>

000003e2 <__do_clear_bss>:
     3e2:	11 e0       	ldi	r17, 0x01	; 1
     3e4:	ae e0       	ldi	r26, 0x0E	; 14
     3e6:	b1 e0       	ldi	r27, 0x01	; 1
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <.do_clear_bss_start>

000003ea <.do_clear_bss_loop>:
     3ea:	1d 92       	st	X+, r1

000003ec <.do_clear_bss_start>:
     3ec:	a6 33       	cpi	r26, 0x36	; 54
     3ee:	b1 07       	cpc	r27, r17
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <.do_clear_bss_loop>
     3f2:	0e 94 4c 08 	call	0x1098	; 0x1098 <main>
     3f6:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <_exit>

000003fa <__bad_interrupt>:
     3fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003fe <RTC_Start>:
					        sei();sleep_cpu();sleep_disable();

volatile uint32_t RTC_TR=0,RTC_DR=0;
uint8_t months[13]={29,31,28,31,30,31,30,31,31,30,31,30,31};

void RTC_Start(uint32_t time, uint32_t date){
     3fe:	6f 92       	push	r6
     400:	7f 92       	push	r7
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	5b 01       	movw	r10, r22
     418:	6c 01       	movw	r12, r24
     41a:	39 01       	movw	r6, r18
     41c:	4a 01       	movw	r8, r20
uint32_t sec=time%100;
uint32_t min=(time/100)%100;
uint32_t hr=time/10000;
RTC_TR=(hr*3600)+(min*60)+sec;
     41e:	20 e1       	ldi	r18, 0x10	; 16
     420:	37 e2       	ldi	r19, 0x27	; 39
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     42a:	ca 01       	movw	r24, r20
     42c:	b9 01       	movw	r22, r18
     42e:	20 e1       	ldi	r18, 0x10	; 16
     430:	3e e0       	ldi	r19, 0x0E	; 14
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 9c 08 	call	0x1138	; 0x1138 <__mulsi3>
     43a:	7b 01       	movw	r14, r22
     43c:	8c 01       	movw	r16, r24
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	24 e6       	ldi	r18, 0x64	; 100
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     44e:	e6 0e       	add	r14, r22
     450:	f7 1e       	adc	r15, r23
     452:	08 1f       	adc	r16, r24
     454:	19 1f       	adc	r17, r25
     456:	c6 01       	movw	r24, r12
     458:	b5 01       	movw	r22, r10
     45a:	24 e6       	ldi	r18, 0x64	; 100
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     466:	ca 01       	movw	r24, r20
     468:	b9 01       	movw	r22, r18
     46a:	24 e6       	ldi	r18, 0x64	; 100
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     476:	2c e3       	ldi	r18, 0x3C	; 60
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	0e 94 9c 08 	call	0x1138	; 0x1138 <__mulsi3>
     482:	e6 0e       	add	r14, r22
     484:	f7 1e       	adc	r15, r23
     486:	08 1f       	adc	r16, r24
     488:	19 1f       	adc	r17, r25
     48a:	e0 92 0e 01 	sts	0x010E, r14
     48e:	f0 92 0f 01 	sts	0x010F, r15
     492:	00 93 10 01 	sts	0x0110, r16
     496:	10 93 11 01 	sts	0x0111, r17
uint32_t day=(date/10000);
uint32_t mnth=(date/100)%100;
     49a:	c4 01       	movw	r24, r8
     49c:	b3 01       	movw	r22, r6
     49e:	24 e6       	ldi	r18, 0x64	; 100
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     4aa:	ca 01       	movw	r24, r20
     4ac:	b9 01       	movw	r22, r18
     4ae:	24 e6       	ldi	r18, 0x64	; 100
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     4ba:	7b 01       	movw	r14, r22
     4bc:	8c 01       	movw	r16, r24
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	65 01       	movw	r12, r10
     4c4:	21 e0       	ldi	r18, 0x01	; 1
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <RTC_Start+0xde>
uint32_t year=(date%100);
uint32_t total_days=0;
for(uint8_t i=1;i<mnth;i++){total_days+=months[i];}
     4c8:	e2 2f       	mov	r30, r18
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	e0 50       	subi	r30, 0x00	; 0
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	80 81       	ld	r24, Z
     4d2:	a8 0e       	add	r10, r24
     4d4:	b1 1c       	adc	r11, r1
     4d6:	c1 1c       	adc	r12, r1
     4d8:	d1 1c       	adc	r13, r1
     4da:	2f 5f       	subi	r18, 0xFF	; 255
     4dc:	82 2f       	mov	r24, r18
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	8e 15       	cp	r24, r14
     4e6:	9f 05       	cpc	r25, r15
     4e8:	a0 07       	cpc	r26, r16
     4ea:	b1 07       	cpc	r27, r17
     4ec:	68 f3       	brcs	.-38     	; 0x4c8 <RTC_Start+0xca>
if(((year/4)==0)&&(mnth>2)){total_days+=1;}
     4ee:	c4 01       	movw	r24, r8
     4f0:	b3 01       	movw	r22, r6
     4f2:	24 e6       	ldi	r18, 0x64	; 100
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     4fe:	64 30       	cpi	r22, 0x04	; 4
     500:	71 05       	cpc	r23, r1
     502:	81 05       	cpc	r24, r1
     504:	91 05       	cpc	r25, r1
     506:	58 f4       	brcc	.+22     	; 0x51e <RTC_Start+0x120>
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	e8 16       	cp	r14, r24
     50c:	f1 04       	cpc	r15, r1
     50e:	01 05       	cpc	r16, r1
     510:	11 05       	cpc	r17, r1
     512:	28 f0       	brcs	.+10     	; 0x51e <RTC_Start+0x120>
     514:	08 94       	sec
     516:	a1 1c       	adc	r10, r1
     518:	b1 1c       	adc	r11, r1
     51a:	c1 1c       	adc	r12, r1
     51c:	d1 1c       	adc	r13, r1
RTC_DR=total_days+day;
     51e:	c4 01       	movw	r24, r8
     520:	b3 01       	movw	r22, r6
     522:	20 e1       	ldi	r18, 0x10	; 16
     524:	37 e2       	ldi	r19, 0x27	; 39
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
     52e:	a2 0e       	add	r10, r18
     530:	b3 1e       	adc	r11, r19
     532:	c4 1e       	adc	r12, r20
     534:	d5 1e       	adc	r13, r21
     536:	a0 92 12 01 	sts	0x0112, r10
     53a:	b0 92 13 01 	sts	0x0113, r11
     53e:	c0 92 14 01 	sts	0x0114, r12
     542:	d0 92 15 01 	sts	0x0115, r13
RTC_reg_init();
     546:	80 e2       	ldi	r24, 0x20	; 32
     548:	80 93 b6 00 	sts	0x00B6, r24
     54c:	85 e0       	ldi	r24, 0x05	; 5
     54e:	80 93 b1 00 	sts	0x00B1, r24
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 70 00 	sts	0x0070, r24
     558:	17 ba       	out	0x17, r1	; 23
     55a:	78 94       	sei
     55c:	80 91 b6 00 	lds	r24, 0x00B6
     560:	84 fd       	sbrc	r24, 4
     562:	fc cf       	rjmp	.-8      	; 0x55c <RTC_Start+0x15e>
}
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	9f 90       	pop	r9
     576:	8f 90       	pop	r8
     578:	7f 90       	pop	r7
     57a:	6f 90       	pop	r6
     57c:	08 95       	ret

0000057e <__vector_9>:

ISR(TIMER2_OVF_vect){
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
RTC_TR++;
     592:	80 91 0e 01 	lds	r24, 0x010E
     596:	90 91 0f 01 	lds	r25, 0x010F
     59a:	a0 91 10 01 	lds	r26, 0x0110
     59e:	b0 91 11 01 	lds	r27, 0x0111
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	80 93 0e 01 	sts	0x010E, r24
     5ac:	90 93 0f 01 	sts	0x010F, r25
     5b0:	a0 93 10 01 	sts	0x0110, r26
     5b4:	b0 93 11 01 	sts	0x0111, r27
if(RTC_TR>86399){RTC_TR=0;RTC_DR++;}
     5b8:	80 91 0e 01 	lds	r24, 0x010E
     5bc:	90 91 0f 01 	lds	r25, 0x010F
     5c0:	a0 91 10 01 	lds	r26, 0x0110
     5c4:	b0 91 11 01 	lds	r27, 0x0111
     5c8:	80 58       	subi	r24, 0x80	; 128
     5ca:	91 45       	sbci	r25, 0x51	; 81
     5cc:	a1 40       	sbci	r26, 0x01	; 1
     5ce:	b0 40       	sbci	r27, 0x00	; 0
     5d0:	d8 f0       	brcs	.+54     	; 0x608 <__vector_9+0x8a>
     5d2:	10 92 0e 01 	sts	0x010E, r1
     5d6:	10 92 0f 01 	sts	0x010F, r1
     5da:	10 92 10 01 	sts	0x0110, r1
     5de:	10 92 11 01 	sts	0x0111, r1
     5e2:	80 91 12 01 	lds	r24, 0x0112
     5e6:	90 91 13 01 	lds	r25, 0x0113
     5ea:	a0 91 14 01 	lds	r26, 0x0114
     5ee:	b0 91 15 01 	lds	r27, 0x0115
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	a1 1d       	adc	r26, r1
     5f6:	b1 1d       	adc	r27, r1
     5f8:	80 93 12 01 	sts	0x0112, r24
     5fc:	90 93 13 01 	sts	0x0113, r25
     600:	a0 93 14 01 	sts	0x0114, r26
     604:	b0 93 15 01 	sts	0x0115, r27
}
     608:	bf 91       	pop	r27
     60a:	af 91       	pop	r26
     60c:	9f 91       	pop	r25
     60e:	8f 91       	pop	r24
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <RTC_sleep>:

void RTC_sleep(uint32_t sec){
     61c:	9b 01       	movw	r18, r22
     61e:	ac 01       	movw	r20, r24
uint32_t  now=RTC_TR+sec;
     620:	80 91 0e 01 	lds	r24, 0x010E
     624:	90 91 0f 01 	lds	r25, 0x010F
     628:	a0 91 10 01 	lds	r26, 0x0110
     62c:	b0 91 11 01 	lds	r27, 0x0111
     630:	28 0f       	add	r18, r24
     632:	39 1f       	adc	r19, r25
     634:	4a 1f       	adc	r20, r26
     636:	5b 1f       	adc	r21, r27
if(now>86399){while(RTC_TR!=0){power_save_sleep();}now=now-86400;}
     638:	20 38       	cpi	r18, 0x80	; 128
     63a:	81 e5       	ldi	r24, 0x51	; 81
     63c:	38 07       	cpc	r19, r24
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	48 07       	cpc	r20, r24
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	58 07       	cpc	r21, r24
     646:	c0 f4       	brcc	.+48     	; 0x678 <RTC_sleep+0x5c>
     648:	3f c0       	rjmp	.+126    	; 0x6c8 <RTC_sleep+0xac>
     64a:	10 92 7a 00 	sts	0x007A, r1
     64e:	80 b7       	in	r24, 0x30	; 48
     650:	80 68       	ori	r24, 0x80	; 128
     652:	80 bf       	out	0x30, r24	; 48
     654:	f8 94       	cli
     656:	83 b7       	in	r24, 0x33	; 51
     658:	81 7f       	andi	r24, 0xF1	; 241
     65a:	86 60       	ori	r24, 0x06	; 6
     65c:	83 bf       	out	0x33, r24	; 51
     65e:	83 b7       	in	r24, 0x33	; 51
     660:	81 60       	ori	r24, 0x01	; 1
     662:	83 bf       	out	0x33, r24	; 51
     664:	85 b7       	in	r24, 0x35	; 53
     666:	80 66       	ori	r24, 0x60	; 96
     668:	85 bf       	out	0x35, r24	; 53
     66a:	8f 7d       	andi	r24, 0xDF	; 223
     66c:	85 bf       	out	0x35, r24	; 53
     66e:	78 94       	sei
     670:	88 95       	sleep
     672:	83 b7       	in	r24, 0x33	; 51
     674:	8e 7f       	andi	r24, 0xFE	; 254
     676:	83 bf       	out	0x33, r24	; 51
     678:	80 91 0e 01 	lds	r24, 0x010E
     67c:	90 91 0f 01 	lds	r25, 0x010F
     680:	a0 91 10 01 	lds	r26, 0x0110
     684:	b0 91 11 01 	lds	r27, 0x0111
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	a1 05       	cpc	r26, r1
     68c:	b1 05       	cpc	r27, r1
     68e:	e9 f6       	brne	.-70     	; 0x64a <RTC_sleep+0x2e>
     690:	20 58       	subi	r18, 0x80	; 128
     692:	31 45       	sbci	r19, 0x51	; 81
     694:	41 40       	sbci	r20, 0x01	; 1
     696:	50 40       	sbci	r21, 0x00	; 0
     698:	17 c0       	rjmp	.+46     	; 0x6c8 <RTC_sleep+0xac>
while(RTC_TR<now){power_save_sleep();}
     69a:	10 92 7a 00 	sts	0x007A, r1
     69e:	80 b7       	in	r24, 0x30	; 48
     6a0:	80 68       	ori	r24, 0x80	; 128
     6a2:	80 bf       	out	0x30, r24	; 48
     6a4:	f8 94       	cli
     6a6:	83 b7       	in	r24, 0x33	; 51
     6a8:	81 7f       	andi	r24, 0xF1	; 241
     6aa:	86 60       	ori	r24, 0x06	; 6
     6ac:	83 bf       	out	0x33, r24	; 51
     6ae:	83 b7       	in	r24, 0x33	; 51
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	83 bf       	out	0x33, r24	; 51
     6b4:	85 b7       	in	r24, 0x35	; 53
     6b6:	80 66       	ori	r24, 0x60	; 96
     6b8:	85 bf       	out	0x35, r24	; 53
     6ba:	8f 7d       	andi	r24, 0xDF	; 223
     6bc:	85 bf       	out	0x35, r24	; 53
     6be:	78 94       	sei
     6c0:	88 95       	sleep
     6c2:	83 b7       	in	r24, 0x33	; 51
     6c4:	8e 7f       	andi	r24, 0xFE	; 254
     6c6:	83 bf       	out	0x33, r24	; 51
     6c8:	80 91 0e 01 	lds	r24, 0x010E
     6cc:	90 91 0f 01 	lds	r25, 0x010F
     6d0:	a0 91 10 01 	lds	r26, 0x0110
     6d4:	b0 91 11 01 	lds	r27, 0x0111
     6d8:	82 17       	cp	r24, r18
     6da:	93 07       	cpc	r25, r19
     6dc:	a4 07       	cpc	r26, r20
     6de:	b5 07       	cpc	r27, r21
     6e0:	e0 f2       	brcs	.-72     	; 0x69a <RTC_sleep+0x7e>
}
     6e2:	08 95       	ret

000006e4 <spi_init>:
				 },
      };


void spi_init(void){
DDRB |=(1<<2)|(1<<3)|(1<<5);
     6e4:	84 b1       	in	r24, 0x04	; 4
     6e6:	8c 62       	ori	r24, 0x2C	; 44
     6e8:	84 b9       	out	0x04, r24	; 4
PORTB|=(1<<3);
     6ea:	2b 9a       	sbi	0x05, 3	; 5
disable();
     6ec:	2a 9a       	sbi	0x05, 2	; 5
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
     6ee:	82 e5       	ldi	r24, 0x52	; 82
     6f0:	8c bd       	out	0x2c, r24	; 44
}
     6f2:	08 95       	ret

000006f4 <spi_tx>:

void spi_tx(uint8_t data){
SPDR = data;
     6f4:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     6f6:	0d b4       	in	r0, 0x2d	; 45
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <spi_tx+0x2>
}
     6fc:	08 95       	ret

000006fe <spi_write>:
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     6fe:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <spi_write+0x2>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     706:	6e bd       	out	0x2e, r22	; 46
while((SPSR & (1 << SPIF))==0);
     708:	0d b4       	in	r0, 0x2d	; 45
     70a:	07 fe       	sbrs	r0, 7
     70c:	fd cf       	rjmp	.-6      	; 0x708 <spi_write+0xa>
}

void spi_write(uint8_t addr, uint8_t data){
spi_tx(addr);
spi_tx(data);
}
     70e:	08 95       	ret

00000710 <whole>:

void whole(uint8_t addr, uint8_t data){
enable();
     710:	2a 98       	cbi	0x05, 2	; 5
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     712:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     714:	0d b4       	in	r0, 0x2d	; 45
     716:	07 fe       	sbrs	r0, 7
     718:	fd cf       	rjmp	.-6      	; 0x714 <whole+0x4>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     71a:	6e bd       	out	0x2e, r22	; 46
while((SPSR & (1 << SPIF))==0);
     71c:	0d b4       	in	r0, 0x2d	; 45
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <whole+0xc>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     722:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     724:	0d b4       	in	r0, 0x2d	; 45
     726:	07 fe       	sbrs	r0, 7
     728:	fd cf       	rjmp	.-6      	; 0x724 <whole+0x14>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     72a:	6e bd       	out	0x2e, r22	; 46
while((SPSR & (1 << SPIF))==0);
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
     730:	fd cf       	rjmp	.-6      	; 0x72c <whole+0x1c>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     732:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <whole+0x24>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     73a:	6e bd       	out	0x2e, r22	; 46
while((SPSR & (1 << SPIF))==0);
     73c:	0d b4       	in	r0, 0x2d	; 45
     73e:	07 fe       	sbrs	r0, 7
     740:	fd cf       	rjmp	.-6      	; 0x73c <whole+0x2c>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     742:	8e bd       	out	0x2e, r24	; 46
while((SPSR & (1 << SPIF))==0);
     744:	0d b4       	in	r0, 0x2d	; 45
     746:	07 fe       	sbrs	r0, 7
     748:	fd cf       	rjmp	.-6      	; 0x744 <whole+0x34>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     74a:	6e bd       	out	0x2e, r22	; 46
while((SPSR & (1 << SPIF))==0);
     74c:	0d b4       	in	r0, 0x2d	; 45
     74e:	07 fe       	sbrs	r0, 7
     750:	fd cf       	rjmp	.-6      	; 0x74c <whole+0x3c>
enable();
spi_write(addr,data);
spi_write(addr,data);
spi_write(addr,data);
spi_write(addr,data);
disable();
     752:	2a 9a       	sbi	0x05, 2	; 5
}
     754:	08 95       	ret

00000756 <send>:

void send(uint8_t *data){
     756:	31 e0       	ldi	r19, 0x01	; 1
for(uint8_t i=0;i<8;i++){
  enable();
     758:	2a 98       	cbi	0x05, 2	; 5
     75a:	fc 01       	movw	r30, r24
     75c:	20 e0       	ldi	r18, 0x00	; 0
  for(uint8_t k=0;k<4;k++){spi_write(i+1,data[k*8+i]);}
     75e:	40 81       	ld	r20, Z
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     760:	3e bd       	out	0x2e, r19	; 46
while((SPSR & (1 << SPIF))==0);
     762:	0d b4       	in	r0, 0x2d	; 45
     764:	07 fe       	sbrs	r0, 7
     766:	fd cf       	rjmp	.-6      	; 0x762 <send+0xc>
disable();
SPCR=(1 << SPE) | (1 << MSTR) | (1 << SPR1);
}

void spi_tx(uint8_t data){
SPDR = data;
     768:	4e bd       	out	0x2e, r20	; 46
while((SPSR & (1 << SPIF))==0);
     76a:	0d b4       	in	r0, 0x2d	; 45
     76c:	07 fe       	sbrs	r0, 7
     76e:	fd cf       	rjmp	.-6      	; 0x76a <send+0x14>
}

void send(uint8_t *data){
for(uint8_t i=0;i<8;i++){
  enable();
  for(uint8_t k=0;k<4;k++){spi_write(i+1,data[k*8+i]);}
     770:	2f 5f       	subi	r18, 0xFF	; 255
     772:	38 96       	adiw	r30, 0x08	; 8
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	99 f7       	brne	.-26     	; 0x75e <send+0x8>
  disable();
     778:	2a 9a       	sbi	0x05, 2	; 5
     77a:	3f 5f       	subi	r19, 0xFF	; 255
     77c:	01 96       	adiw	r24, 0x01	; 1
spi_write(addr,data);
disable();
}

void send(uint8_t *data){
for(uint8_t i=0;i<8;i++){
     77e:	39 30       	cpi	r19, 0x09	; 9
     780:	59 f7       	brne	.-42     	; 0x758 <send+0x2>
  enable();
  for(uint8_t k=0;k<4;k++){spi_write(i+1,data[k*8+i]);}
  disable();
  }
}
     782:	08 95       	ret

00000784 <clear_display>:

void clear_display(void){
whole(0x01,0x00);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x02,0x00);
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x03,0x00);
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x04,0x00);
     79c:	84 e0       	ldi	r24, 0x04	; 4
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x05,0x00);
     7a4:	85 e0       	ldi	r24, 0x05	; 5
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x06,0x00);
     7ac:	86 e0       	ldi	r24, 0x06	; 6
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x07,0x00);
     7b4:	87 e0       	ldi	r24, 0x07	; 7
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x08,0x00);
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	0e 94 88 03 	call	0x710	; 0x710 <whole>


whole(0x01,0x00);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x02,0x00);
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x03,0x00);
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x04,0x00);
     7dc:	84 e0       	ldi	r24, 0x04	; 4
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x05,0x00);
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x06,0x00);
     7ec:	86 e0       	ldi	r24, 0x06	; 6
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x07,0x00);
     7f4:	87 e0       	ldi	r24, 0x07	; 7
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x08,0x00);
     7fc:	88 e0       	ldi	r24, 0x08	; 8
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	0e 94 88 03 	call	0x710	; 0x710 <whole>

whole(0x01,0x00);
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x02,0x00);
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x03,0x00);
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x04,0x00);
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x05,0x00);
     824:	85 e0       	ldi	r24, 0x05	; 5
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x06,0x00);
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x07,0x00);
     834:	87 e0       	ldi	r24, 0x07	; 7
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x08,0x00);
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	0e 94 88 03 	call	0x710	; 0x710 <whole>
}
     844:	08 95       	ret

00000846 <display_init>:

void display_init(void){
     846:	88 ee       	ldi	r24, 0xE8	; 232
     848:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     84a:	28 ec       	ldi	r18, 0xC8	; 200
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	f9 01       	movw	r30, r18
     850:	31 97       	sbiw	r30, 0x01	; 1
     852:	f1 f7       	brne	.-4      	; 0x850 <display_init+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     854:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     856:	d9 f7       	brne	.-10     	; 0x84e <display_init+0x8>
_delay_ms(100);
whole(0x0F,0x01);
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	0e 94 88 03 	call	0x710	; 0x710 <whole>
     860:	88 ee       	ldi	r24, 0xE8	; 232
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	28 ec       	ldi	r18, 0xC8	; 200
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	f9 01       	movw	r30, r18
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <display_init+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     870:	d9 f7       	brne	.-10     	; 0x868 <display_init+0x22>
_delay_ms(100);
whole(0x0F,0x00);
     872:	8f e0       	ldi	r24, 0x0F	; 15
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x0A,BRIGHTNESS);
     87a:	8a e0       	ldi	r24, 0x0A	; 10
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	0e 94 88 03 	call	0x710	; 0x710 <whole>
whole(0x0B,0x07);
     882:	8b e0       	ldi	r24, 0x0B	; 11
     884:	67 e0       	ldi	r22, 0x07	; 7
     886:	0e 94 88 03 	call	0x710	; 0x710 <whole>
clear_display();
     88a:	0e 94 c2 03 	call	0x784	; 0x784 <clear_display>
whole(0x0C,0x01);
     88e:	8c e0       	ldi	r24, 0x0C	; 12
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	0e 94 88 03 	call	0x710	; 0x710 <whole>
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	9e e4       	ldi	r25, 0x4E	; 78
     89a:	28 ec       	ldi	r18, 0xC8	; 200
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	f9 01       	movw	r30, r18
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <display_init+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a6:	d9 f7       	brne	.-10     	; 0x89e <display_init+0x58>
_delay_ms(2000);
}
     8a8:	08 95       	ret

000008aa <empty_coloumn>:

void empty_coloumn(void){
     8aa:	e6 e1       	ldi	r30, 0x16	; 22
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
for(uint8_t i=0;i<32;i++){raw[i]=0;}
     8ae:	11 92       	st	Z+, r1
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	e6 33       	cpi	r30, 0x36	; 54
     8b4:	f8 07       	cpc	r31, r24
     8b6:	d9 f7       	brne	.-10     	; 0x8ae <empty_coloumn+0x4>
}
     8b8:	08 95       	ret

000008ba <fill_buffer>:

void fill_buffer(uint8_t character,uint8_t max_col, int posx, int posy){
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	8a 01       	movw	r16, r20
     8dc:	79 01       	movw	r14, r18
for(int col=(max_col-1);col>-1;col--){
     8de:	70 e0       	ldi	r23, 0x00	; 0
  for(int row=0;row<8;row++){
    raw[((max_col-1)-col)+posx]+=((pgm_read_byte(&(chars[character-32][row]))>>col)&1)<<row;
     8e0:	48 2f       	mov	r20, r24
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	44 0f       	add	r20, r20
     8e8:	55 1f       	adc	r21, r21
     8ea:	8a 95       	dec	r24
     8ec:	e1 f7       	brne	.-8      	; 0x8e6 <fill_buffer+0x2c>

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
}

void fill_buffer(uint8_t character,uint8_t max_col, int posx, int posy){
     8ee:	3b 01       	movw	r6, r22
     8f0:	60 0e       	add	r6, r16
     8f2:	71 1e       	adc	r7, r17
     8f4:	e8 01       	movw	r28, r16
     8f6:	ca 5e       	subi	r28, 0xEA	; 234
     8f8:	de 4f       	sbci	r29, 0xFE	; 254
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	6b 01       	movw	r12, r22
     900:	4b 01       	movw	r8, r22
     902:	08 94       	sec
     904:	81 08       	sbc	r8, r1
     906:	91 08       	sbc	r9, r1
for(int col=(max_col-1);col>-1;col--){
     908:	41 57       	subi	r20, 0x71	; 113
     90a:	50 40       	sbci	r21, 0x00	; 0
     90c:	1d c0       	rjmp	.+58     	; 0x948 <__stack+0x49>
  for(int row=0;row<8;row++){
    raw[((max_col-1)-col)+posx]+=((pgm_read_byte(&(chars[character-32][row]))>>col)&1)<<row;
     90e:	fd 01       	movw	r30, r26
     910:	84 91       	lpm	r24, Z+
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0a 2c       	mov	r0, r10
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
     918:	95 95       	asr	r25
     91a:	87 95       	ror	r24
     91c:	0a 94       	dec	r0
     91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0x19>
     920:	81 70       	andi	r24, 0x01	; 1
     922:	90 70       	andi	r25, 0x00	; 0
     924:	04 2c       	mov	r0, r4
     926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	0a 94       	dec	r0
     92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0x29>
     930:	68 0f       	add	r22, r24
for(uint8_t i=0;i<32;i++){raw[i]=0;}
}

void fill_buffer(uint8_t character,uint8_t max_col, int posx, int posy){
for(int col=(max_col-1);col>-1;col--){
  for(int row=0;row<8;row++){
     932:	08 94       	sec
     934:	41 1c       	adc	r4, r1
     936:	51 1c       	adc	r5, r1
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	f8 e0       	ldi	r31, 0x08	; 8
     93c:	4f 16       	cp	r4, r31
     93e:	51 04       	cpc	r5, r1
     940:	31 f7       	brne	.-52     	; 0x90e <__stack+0xf>
     942:	69 93       	st	Y+, r22
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
}

void fill_buffer(uint8_t character,uint8_t max_col, int posx, int posy){
     948:	54 01       	movw	r10, r8
     94a:	a2 1a       	sub	r10, r18
     94c:	b3 0a       	sbc	r11, r19
for(int col=(max_col-1);col>-1;col--){
     94e:	2c 15       	cp	r18, r12
     950:	3d 05       	cpc	r19, r13
     952:	29 f0       	breq	.+10     	; 0x95e <__stack+0x5f>
     954:	68 81       	ld	r22, Y
     956:	da 01       	movw	r26, r20
     958:	44 24       	eor	r4, r4
     95a:	55 24       	eor	r5, r5
     95c:	d8 cf       	rjmp	.-80     	; 0x90e <__stack+0xf>
  for(int row=0;row<8;row++){
    raw[((max_col-1)-col)+posx]+=((pgm_read_byte(&(chars[character-32][row]))>>col)&1)<<row;
	}
  }
for(uint8_t i=posx;i<(posx+max_col);i++){
     95e:	40 2f       	mov	r20, r16
  int tmp=posy;
  if(tmp>0){raw[i]>>=tmp;}
  else if(tmp<0){tmp=-tmp;raw[i]<<=tmp;}
     960:	22 27       	eor	r18, r18
     962:	33 27       	eor	r19, r19
     964:	2e 19       	sub	r18, r14
     966:	3f 09       	sbc	r19, r15
     968:	1d c0       	rjmp	.+58     	; 0x9a4 <__stack+0xa5>
    raw[((max_col-1)-col)+posx]+=((pgm_read_byte(&(chars[character-32][row]))>>col)&1)<<row;
	}
  }
for(uint8_t i=posx;i<(posx+max_col);i++){
  int tmp=posy;
  if(tmp>0){raw[i]>>=tmp;}
     96a:	1e 14       	cp	r1, r14
     96c:	1f 04       	cpc	r1, r15
     96e:	5c f4       	brge	.+22     	; 0x986 <__stack+0x87>
     970:	ea 5e       	subi	r30, 0xEA	; 234
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 2c       	mov	r0, r14
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
     97c:	95 95       	asr	r25
     97e:	87 95       	ror	r24
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <__stack+0x7d>
     984:	0d c0       	rjmp	.+26     	; 0x9a0 <__stack+0xa1>
  else if(tmp<0){tmp=-tmp;raw[i]<<=tmp;}
     986:	e1 14       	cp	r14, r1
     988:	f1 04       	cpc	r15, r1
     98a:	59 f0       	breq	.+22     	; 0x9a2 <__stack+0xa3>
     98c:	ea 5e       	subi	r30, 0xEA	; 234
     98e:	fe 4f       	sbci	r31, 0xFE	; 254
     990:	80 81       	ld	r24, Z
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	02 2e       	mov	r0, r18
     996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x9d>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <__stack+0x99>
     9a0:	80 83       	st	Z, r24
for(int col=(max_col-1);col>-1;col--){
  for(int row=0;row<8;row++){
    raw[((max_col-1)-col)+posx]+=((pgm_read_byte(&(chars[character-32][row]))>>col)&1)<<row;
	}
  }
for(uint8_t i=posx;i<(posx+max_col);i++){
     9a2:	4f 5f       	subi	r20, 0xFF	; 255
     9a4:	e4 2f       	mov	r30, r20
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	e6 15       	cp	r30, r6
     9aa:	f7 05       	cpc	r31, r7
     9ac:	f4 f2       	brlt	.-68     	; 0x96a <__stack+0x6b>
  int tmp=posy;
  if(tmp>0){raw[i]>>=tmp;}
  else if(tmp<0){tmp=-tmp;raw[i]<<=tmp;}
  }
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	08 95       	ret

000009d0 <char_slide_in>:
fill_buffer(n[2],5,12,0);
fill_buffer(n[3],5,18,0);
send(raw);
}*/

void char_slide_in(uint8_t max_col, uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
     9d0:	2f 92       	push	r2
     9d2:	3f 92       	push	r3
     9d4:	4f 92       	push	r4
     9d6:	5f 92       	push	r5
     9d8:	6f 92       	push	r6
     9da:	7f 92       	push	r7
     9dc:	8f 92       	push	r8
     9de:	9f 92       	push	r9
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	d8 2e       	mov	r13, r24
     9fa:	36 2e       	mov	r3, r22
     9fc:	44 2e       	mov	r4, r20
     9fe:	52 2e       	mov	r5, r18
     a00:	60 2e       	mov	r6, r16
     a02:	7e 2c       	mov	r7, r14
     a04:	9c 2c       	mov	r9, r12
     a06:	ca 2c       	mov	r12, r10
     a08:	2e 88       	ldd	r2, Y+22	; 0x16
     a0a:	0a e0       	ldi	r16, 0x0A	; 10
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	20 e4       	ldi	r18, 0x40	; 64
     a10:	a2 2e       	mov	r10, r18
     a12:	2c e9       	ldi	r18, 0x9C	; 156
     a14:	b2 2e       	mov	r11, r18
     a16:	38 c0       	rjmp	.+112    	; 0xa88 <char_slide_in+0xb8>
whole(0x0C,0x01);
_delay_ms(2000);
}

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
     a18:	f7 01       	movw	r30, r14
     a1a:	11 92       	st	Z+, r1
     a1c:	7f 01       	movw	r14, r30
     a1e:	f6 e3       	ldi	r31, 0x36	; 54
     a20:	ef 16       	cp	r14, r31
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	ff 06       	cpc	r15, r31
     a26:	c1 f7       	brne	.-16     	; 0xa18 <char_slide_in+0x48>
}*/

void char_slide_in(uint8_t max_col, uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=10;i>-1;i--){
  empty_coloumn();
  fill_buffer(c1,max_col,pos1,i);
     a28:	83 2d       	mov	r24, r3
     a2a:	6d 2d       	mov	r22, r13
     a2c:	44 2d       	mov	r20, r4
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	98 01       	movw	r18, r16
     a32:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c2,max_col,pos2,i);
     a36:	85 2d       	mov	r24, r5
     a38:	6d 2d       	mov	r22, r13
     a3a:	46 2d       	mov	r20, r6
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	98 01       	movw	r18, r16
     a40:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c3,max_col,pos3,i);
     a44:	87 2d       	mov	r24, r7
     a46:	6d 2d       	mov	r22, r13
     a48:	49 2d       	mov	r20, r9
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	98 01       	movw	r18, r16
     a4e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c4,max_col,pos4,i);
     a52:	8c 2d       	mov	r24, r12
     a54:	6d 2d       	mov	r22, r13
     a56:	48 2d       	mov	r20, r8
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	98 01       	movw	r18, r16
     a5c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c5,max_col,pos5,i);
     a60:	8d 89       	ldd	r24, Y+21	; 0x15
     a62:	6d 2d       	mov	r22, r13
     a64:	42 2d       	mov	r20, r2
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	98 01       	movw	r18, r16
     a6a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  send(raw);
     a6e:	c7 01       	movw	r24, r14
     a70:	80 97       	sbiw	r24, 0x20	; 32
     a72:	0e 94 ab 03 	call	0x756	; 0x756 <send>
     a76:	c5 01       	movw	r24, r10
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <char_slide_in+0xa8>
fill_buffer(n[3],5,18,0);
send(raw);
}*/

void char_slide_in(uint8_t max_col, uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=10;i>-1;i--){
     a7c:	01 50       	subi	r16, 0x01	; 1
     a7e:	10 40       	sbci	r17, 0x00	; 0
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	0f 3f       	cpi	r16, 0xFF	; 255
     a84:	18 07       	cpc	r17, r24
     a86:	29 f0       	breq	.+10     	; 0xa92 <char_slide_in+0xc2>
     a88:	96 e1       	ldi	r25, 0x16	; 22
     a8a:	e9 2e       	mov	r14, r25
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	f9 2e       	mov	r15, r25
     a90:	c3 cf       	rjmp	.-122    	; 0xa18 <char_slide_in+0x48>
  fill_buffer(c4,max_col,pos4,i);
  fill_buffer(c5,max_col,pos5,i);
  send(raw);
  _delay_ms(ANIM_DELAY);
  }
}
     a92:	cf 91       	pop	r28
     a94:	df 91       	pop	r29
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	7f 90       	pop	r7
     aac:	6f 90       	pop	r6
     aae:	5f 90       	pop	r5
     ab0:	4f 90       	pop	r4
     ab2:	3f 90       	pop	r3
     ab4:	2f 90       	pop	r2
     ab6:	08 95       	ret

00000ab8 <char_slide_in_fall>:

void char_slide_in_fall(uint8_t max_col, uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
     ab8:	3f 92       	push	r3
     aba:	4f 92       	push	r4
     abc:	5f 92       	push	r5
     abe:	6f 92       	push	r6
     ac0:	7f 92       	push	r7
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	df 93       	push	r29
     ad8:	cf 93       	push	r28
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	f8 2e       	mov	r15, r24
     ae0:	56 2e       	mov	r5, r22
     ae2:	64 2e       	mov	r6, r20
     ae4:	72 2e       	mov	r7, r18
     ae6:	90 2e       	mov	r9, r16
     ae8:	be 2c       	mov	r11, r14
     aea:	ec 2c       	mov	r14, r12
     aec:	3c 88       	ldd	r3, Y+20	; 0x14
     aee:	4d 88       	ldd	r4, Y+21	; 0x15
     af0:	0d e0       	ldi	r16, 0x0D	; 13
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	30 e4       	ldi	r19, 0x40	; 64
     af6:	c3 2e       	mov	r12, r19
     af8:	3c e9       	ldi	r19, 0x9C	; 156
     afa:	d3 2e       	mov	r13, r19
     afc:	e6 e1       	ldi	r30, 0x16	; 22
     afe:	f1 e0       	ldi	r31, 0x01	; 1
whole(0x0C,0x01);
_delay_ms(2000);
}

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
     b00:	11 92       	st	Z+, r1
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	e6 33       	cpi	r30, 0x36	; 54
     b06:	f8 07       	cpc	r31, r24
     b08:	d9 f7       	brne	.-10     	; 0xb00 <char_slide_in_fall+0x48>
  int i2=i+3;if(i2<0){i2=0;}
  int i3=i+6;if(i3<0){i3=0;}
  int i4=i+9;if(i4<0){i4=0;}
  int i5=i+12;if(i5<0){i5=0;}
  empty_coloumn();
  fill_buffer(c1,max_col,pos1,i5);
     b0a:	98 01       	movw	r18, r16
     b0c:	24 5f       	subi	r18, 0xF4	; 244
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	85 2d       	mov	r24, r5
     b12:	6f 2d       	mov	r22, r15
     b14:	46 2d       	mov	r20, r6
     b16:	50 e0       	ldi	r21, 0x00	; 0
     b18:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     b1c:	98 01       	movw	r18, r16
     b1e:	27 5f       	subi	r18, 0xF7	; 247
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c2,max_col,pos2,i4);
     b22:	37 ff       	sbrs	r19, 7
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <char_slide_in_fall+0x72>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	87 2d       	mov	r24, r7
     b2c:	6f 2d       	mov	r22, r15
     b2e:	49 2d       	mov	r20, r9
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     b36:	98 01       	movw	r18, r16
     b38:	2a 5f       	subi	r18, 0xFA	; 250
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c3,max_col,pos3,i3);
     b3c:	37 ff       	sbrs	r19, 7
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <char_slide_in_fall+0x8c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	8b 2d       	mov	r24, r11
     b46:	6f 2d       	mov	r22, r15
     b48:	4e 2d       	mov	r20, r14
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     b50:	98 01       	movw	r18, r16
     b52:	2d 5f       	subi	r18, 0xFD	; 253
     b54:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c4,max_col,pos4,i2);
     b56:	37 ff       	sbrs	r19, 7
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <char_slide_in_fall+0xa6>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	8a 2d       	mov	r24, r10
     b60:	6f 2d       	mov	r22, r15
     b62:	48 2d       	mov	r20, r8
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c5,max_col,pos5,i1);
     b6a:	98 01       	movw	r18, r16
     b6c:	17 ff       	sbrs	r17, 7
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <char_slide_in_fall+0xbc>
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	83 2d       	mov	r24, r3
     b76:	6f 2d       	mov	r22, r15
     b78:	44 2d       	mov	r20, r4
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  send(raw);
     b80:	86 e1       	ldi	r24, 0x16	; 22
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 ab 03 	call	0x756	; 0x756 <send>
     b88:	c6 01       	movw	r24, r12
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <char_slide_in_fall+0xd2>
  _delay_ms(ANIM_DELAY);
  }
}

void char_slide_in_fall(uint8_t max_col, uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=13;i>-13;i--){
     b8e:	01 50       	subi	r16, 0x01	; 1
     b90:	10 40       	sbci	r17, 0x00	; 0
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	03 3f       	cpi	r16, 0xF3	; 243
     b96:	18 07       	cpc	r17, r24
     b98:	09 f0       	breq	.+2      	; 0xb9c <char_slide_in_fall+0xe4>
     b9a:	b0 cf       	rjmp	.-160    	; 0xafc <char_slide_in_fall+0x44>
  fill_buffer(c4,max_col,pos4,i2);
  fill_buffer(c5,max_col,pos5,i1);
  send(raw);
  _delay_ms(ANIM_DELAY);
  }
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	08 95       	ret

00000bc0 <char_slide_out>:

void char_slide_out(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
     bc0:	2f 92       	push	r2
     bc2:	3f 92       	push	r3
     bc4:	4f 92       	push	r4
     bc6:	5f 92       	push	r5
     bc8:	6f 92       	push	r6
     bca:	7f 92       	push	r7
     bcc:	8f 92       	push	r8
     bce:	9f 92       	push	r9
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	d8 2e       	mov	r13, r24
     bea:	36 2e       	mov	r3, r22
     bec:	44 2e       	mov	r4, r20
     bee:	52 2e       	mov	r5, r18
     bf0:	60 2e       	mov	r6, r16
     bf2:	7e 2c       	mov	r7, r14
     bf4:	9c 2c       	mov	r9, r12
     bf6:	ca 2c       	mov	r12, r10
     bf8:	2e 88       	ldd	r2, Y+22	; 0x16
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	50 e4       	ldi	r21, 0x40	; 64
     c00:	a5 2e       	mov	r10, r21
     c02:	5c e9       	ldi	r21, 0x9C	; 156
     c04:	b5 2e       	mov	r11, r21
     c06:	38 c0       	rjmp	.+112    	; 0xc78 <char_slide_out+0xb8>
whole(0x0C,0x01);
_delay_ms(2000);
}

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
     c08:	f7 01       	movw	r30, r14
     c0a:	11 92       	st	Z+, r1
     c0c:	7f 01       	movw	r14, r30
     c0e:	f6 e3       	ldi	r31, 0x36	; 54
     c10:	ef 16       	cp	r14, r31
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	ff 06       	cpc	r15, r31
     c16:	c1 f7       	brne	.-16     	; 0xc08 <char_slide_out+0x48>
}

void char_slide_out(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=0;i>-10;i--){
  empty_coloumn();
  fill_buffer(c1,max_col,pos1,i);
     c18:	83 2d       	mov	r24, r3
     c1a:	6d 2d       	mov	r22, r13
     c1c:	44 2d       	mov	r20, r4
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	98 01       	movw	r18, r16
     c22:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c2,max_col,pos2,i);
     c26:	85 2d       	mov	r24, r5
     c28:	6d 2d       	mov	r22, r13
     c2a:	46 2d       	mov	r20, r6
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	98 01       	movw	r18, r16
     c30:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c3,max_col,pos3,i);
     c34:	87 2d       	mov	r24, r7
     c36:	6d 2d       	mov	r22, r13
     c38:	49 2d       	mov	r20, r9
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	98 01       	movw	r18, r16
     c3e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c4,max_col,pos4,i);
     c42:	8c 2d       	mov	r24, r12
     c44:	6d 2d       	mov	r22, r13
     c46:	48 2d       	mov	r20, r8
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	98 01       	movw	r18, r16
     c4c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c5,max_col,pos5,i);
     c50:	8d 89       	ldd	r24, Y+21	; 0x15
     c52:	6d 2d       	mov	r22, r13
     c54:	42 2d       	mov	r20, r2
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	98 01       	movw	r18, r16
     c5a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  send(raw);
     c5e:	c7 01       	movw	r24, r14
     c60:	80 97       	sbiw	r24, 0x20	; 32
     c62:	0e 94 ab 03 	call	0x756	; 0x756 <send>
     c66:	c5 01       	movw	r24, r10
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <char_slide_out+0xa8>
  _delay_ms(ANIM_DELAY);
  }
}

void char_slide_out(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=0;i>-10;i--){
     c6c:	01 50       	subi	r16, 0x01	; 1
     c6e:	10 40       	sbci	r17, 0x00	; 0
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	06 3f       	cpi	r16, 0xF6	; 246
     c74:	18 07       	cpc	r17, r24
     c76:	29 f0       	breq	.+10     	; 0xc82 <char_slide_out+0xc2>
     c78:	46 e1       	ldi	r20, 0x16	; 22
     c7a:	e4 2e       	mov	r14, r20
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	f4 2e       	mov	r15, r20
     c80:	c3 cf       	rjmp	.-122    	; 0xc08 <char_slide_out+0x48>
  fill_buffer(c4,max_col,pos4,i);
  fill_buffer(c5,max_col,pos5,i);
  send(raw);
  _delay_ms(ANIM_DELAY);
  }
}
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	bf 90       	pop	r11
     c94:	af 90       	pop	r10
     c96:	9f 90       	pop	r9
     c98:	8f 90       	pop	r8
     c9a:	7f 90       	pop	r7
     c9c:	6f 90       	pop	r6
     c9e:	5f 90       	pop	r5
     ca0:	4f 90       	pop	r4
     ca2:	3f 90       	pop	r3
     ca4:	2f 90       	pop	r2
     ca6:	08 95       	ret

00000ca8 <char_slide_out_fall>:

void char_slide_out_fall(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	f8 2e       	mov	r15, r24
     cd2:	36 2e       	mov	r3, r22
     cd4:	44 2e       	mov	r4, r20
     cd6:	52 2e       	mov	r5, r18
     cd8:	60 2e       	mov	r6, r16
     cda:	7e 2c       	mov	r7, r14
     cdc:	9c 2c       	mov	r9, r12
     cde:	ea 2c       	mov	r14, r10
     ce0:	2e 88       	ldd	r2, Y+22	; 0x16
     ce2:	cc 24       	eor	r12, r12
     ce4:	dd 24       	eor	r13, r13
     ce6:	00 e0       	ldi	r16, 0x00	; 0
     ce8:	10 e0       	ldi	r17, 0x00	; 0
     cea:	60 e4       	ldi	r22, 0x40	; 64
     cec:	a6 2e       	mov	r10, r22
     cee:	6c e9       	ldi	r22, 0x9C	; 156
     cf0:	b6 2e       	mov	r11, r22
     cf2:	e6 e1       	ldi	r30, 0x16	; 22
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
whole(0x0C,0x01);
_delay_ms(2000);
}

void empty_coloumn(void){
for(uint8_t i=0;i<32;i++){raw[i]=0;}
     cf6:	11 92       	st	Z+, r1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	e6 33       	cpi	r30, 0x36	; 54
     cfc:	f8 07       	cpc	r31, r24
     cfe:	d9 f7       	brne	.-10     	; 0xcf6 <char_slide_out_fall+0x4e>
  send(raw);
  _delay_ms(ANIM_DELAY);
  }
}

void char_slide_out_fall(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
     d00:	98 01       	movw	r18, r16
     d02:	24 5f       	subi	r18, 0xF4	; 244
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
  int i2=i+3;if(i2>0){i2=0;}
  int i3=i+6;if(i3>0){i3=0;}
  int i4=i+9;if(i4>0){i4=0;}
  int i5=i+12;if(i5>0){i5=0;}
  empty_coloumn();
  fill_buffer(c1,max_col,pos1,i5);
     d06:	12 16       	cp	r1, r18
     d08:	13 06       	cpc	r1, r19
     d0a:	14 f4       	brge	.+4      	; 0xd10 <char_slide_out_fall+0x68>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	83 2d       	mov	r24, r3
     d12:	6f 2d       	mov	r22, r15
     d14:	44 2d       	mov	r20, r4
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     d1c:	98 01       	movw	r18, r16
     d1e:	27 5f       	subi	r18, 0xF7	; 247
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c2,max_col,pos2,i4);
     d22:	12 16       	cp	r1, r18
     d24:	13 06       	cpc	r1, r19
     d26:	14 f4       	brge	.+4      	; 0xd2c <char_slide_out_fall+0x84>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	85 2d       	mov	r24, r5
     d2e:	6f 2d       	mov	r22, r15
     d30:	46 2d       	mov	r20, r6
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     d38:	98 01       	movw	r18, r16
     d3a:	2a 5f       	subi	r18, 0xFA	; 250
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c3,max_col,pos3,i3);
     d3e:	12 16       	cp	r1, r18
     d40:	13 06       	cpc	r1, r19
     d42:	14 f4       	brge	.+4      	; 0xd48 <char_slide_out_fall+0xa0>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	87 2d       	mov	r24, r7
     d4a:	6f 2d       	mov	r22, r15
     d4c:	49 2d       	mov	r20, r9
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
     d54:	98 01       	movw	r18, r16
     d56:	2d 5f       	subi	r18, 0xFD	; 253
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
  fill_buffer(c4,max_col,pos4,i2);
     d5a:	12 16       	cp	r1, r18
     d5c:	13 06       	cpc	r1, r19
     d5e:	14 f4       	brge	.+4      	; 0xd64 <char_slide_out_fall+0xbc>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	8e 2d       	mov	r24, r14
     d66:	6f 2d       	mov	r22, r15
     d68:	48 2d       	mov	r20, r8
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  fill_buffer(c5,max_col,pos5,i1);
     d70:	8d 89       	ldd	r24, Y+21	; 0x15
     d72:	6f 2d       	mov	r22, r15
     d74:	42 2d       	mov	r20, r2
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	96 01       	movw	r18, r12
     d7a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <fill_buffer>
  send(raw);
     d7e:	86 e1       	ldi	r24, 0x16	; 22
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	0e 94 ab 03 	call	0x756	; 0x756 <send>
     d86:	c5 01       	movw	r24, r10
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <char_slide_out_fall+0xe0>
  _delay_ms(ANIM_DELAY);
  }
}

void char_slide_out_fall(uint8_t max_col,uint8_t c1, uint8_t pos1, uint8_t c2, uint8_t pos2, uint8_t c3,uint8_t pos3, uint8_t c4,uint8_t pos4, uint8_t c5, uint8_t pos5){
for(int i=0;i>-26;i--){
     d8c:	01 50       	subi	r16, 0x01	; 1
     d8e:	10 40       	sbci	r17, 0x00	; 0
     d90:	68 01       	movw	r12, r16
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	06 3e       	cpi	r16, 0xE6	; 230
     d96:	18 07       	cpc	r17, r24
     d98:	09 f0       	breq	.+2      	; 0xd9c <char_slide_out_fall+0xf4>
     d9a:	ab cf       	rjmp	.-170    	; 0xcf2 <char_slide_out_fall+0x4a>
  fill_buffer(c4,max_col,pos4,i2);
  fill_buffer(c5,max_col,pos5,i1);
  send(raw);
  _delay_ms(ANIM_DELAY);
  }
}
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	bf 90       	pop	r11
     dae:	af 90       	pop	r10
     db0:	9f 90       	pop	r9
     db2:	8f 90       	pop	r8
     db4:	7f 90       	pop	r7
     db6:	6f 90       	pop	r6
     db8:	5f 90       	pop	r5
     dba:	4f 90       	pop	r4
     dbc:	3f 90       	pop	r3
     dbe:	2f 90       	pop	r2
     dc0:	08 95       	ret

00000dc2 <time_slide>:


void time_slide(uint8_t hh, uint8_t mm, uint8_t big_font){
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	28 2f       	mov	r18, r24
     dde:	36 2f       	mov	r19, r22
uint8_t h1=(hh/10)+48;uint8_t h2=(hh%10)+48;
     de0:	6a e0       	ldi	r22, 0x0A	; 10
     de2:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     de6:	e8 2f       	mov	r30, r24
     de8:	10 e3       	ldi	r17, 0x30	; 48
     dea:	f1 2e       	mov	r15, r17
     dec:	f8 0e       	add	r15, r24
     dee:	82 2f       	mov	r24, r18
     df0:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     df4:	59 2f       	mov	r21, r25
     df6:	b0 e3       	ldi	r27, 0x30	; 48
     df8:	5b 2e       	mov	r5, r27
     dfa:	59 0e       	add	r5, r25
uint8_t m1=(mm/10)+48;uint8_t m2=(mm%10)+48;
     dfc:	83 2f       	mov	r24, r19
     dfe:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     e02:	28 2f       	mov	r18, r24
     e04:	a0 e3       	ldi	r26, 0x30	; 48
     e06:	6a 2e       	mov	r6, r26
     e08:	68 0e       	add	r6, r24
     e0a:	83 2f       	mov	r24, r19
     e0c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     e10:	f0 e3       	ldi	r31, 0x30	; 48
     e12:	9f 2e       	mov	r9, r31
     e14:	99 0e       	add	r9, r25
uint8_t max_col=5,pos1=0,pos2=7,pos3=20,pos4=27,colon=14;
if(big_font){h1+=76;h2+=76;m1+=76;m2+=76;max_col+=1;pos1=0;pos2=7;pos3=19;pos4=26;colon=13;}
     e16:	44 23       	and	r20, r20
     e18:	41 f4       	brne	.+16     	; 0xe2a <time_slide+0x68>
     e1a:	74 e1       	ldi	r23, 0x14	; 20
     e1c:	77 2e       	mov	r7, r23
     e1e:	6b e1       	ldi	r22, 0x1B	; 27
     e20:	d6 2e       	mov	r13, r22
     e22:	5e e0       	ldi	r21, 0x0E	; 14
     e24:	b5 2e       	mov	r11, r21
     e26:	15 e0       	ldi	r17, 0x05	; 5
     e28:	13 c0       	rjmp	.+38     	; 0xe50 <time_slide+0x8e>
     e2a:	4c e7       	ldi	r20, 0x7C	; 124
     e2c:	f4 2e       	mov	r15, r20
     e2e:	fe 0e       	add	r15, r30
     e30:	3c e7       	ldi	r19, 0x7C	; 124
     e32:	53 2e       	mov	r5, r19
     e34:	55 0e       	add	r5, r21
     e36:	8c e7       	ldi	r24, 0x7C	; 124
     e38:	68 2e       	mov	r6, r24
     e3a:	62 0e       	add	r6, r18
     e3c:	0c e7       	ldi	r16, 0x7C	; 124
     e3e:	90 2e       	mov	r9, r16
     e40:	99 0e       	add	r9, r25
     e42:	13 e1       	ldi	r17, 0x13	; 19
     e44:	71 2e       	mov	r7, r17
     e46:	ba e1       	ldi	r27, 0x1A	; 26
     e48:	db 2e       	mov	r13, r27
     e4a:	ad e0       	ldi	r26, 0x0D	; 13
     e4c:	ba 2e       	mov	r11, r26
     e4e:	16 e0       	ldi	r17, 0x06	; 6
if((h1==48)||(h1==124)){h1=32;}
     e50:	80 e3       	ldi	r24, 0x30	; 48
     e52:	f8 16       	cp	r15, r24
     e54:	19 f0       	breq	.+6      	; 0xe5c <time_slide+0x9a>
     e56:	ec e7       	ldi	r30, 0x7C	; 124
     e58:	fe 16       	cp	r15, r30
     e5a:	11 f4       	brne	.+4      	; 0xe60 <time_slide+0x9e>
     e5c:	f0 e2       	ldi	r31, 0x20	; 32
     e5e:	ff 2e       	mov	r15, r31
char_slide_in_fall(max_col,h1,pos1,h2,pos2,':',colon,m1,pos3,m2,pos4);
     e60:	00 d0       	rcall	.+0      	; 0xe62 <time_slide+0xa0>
     e62:	ed b7       	in	r30, 0x3d	; 61
     e64:	fe b7       	in	r31, 0x3e	; 62
     e66:	91 82       	std	Z+1, r9	; 0x01
     e68:	d2 82       	std	Z+2, r13	; 0x02
     e6a:	81 2f       	mov	r24, r17
     e6c:	6f 2d       	mov	r22, r15
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	25 2d       	mov	r18, r5
     e72:	07 e0       	ldi	r16, 0x07	; 7
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	ee 2e       	mov	r14, r30
     e78:	cb 2c       	mov	r12, r11
     e7a:	a6 2c       	mov	r10, r6
     e7c:	87 2c       	mov	r8, r7
     e7e:	0e 94 5c 05 	call	0xab8	; 0xab8 <char_slide_in_fall>
     e82:	20 e5       	ldi	r18, 0x50	; 80
     e84:	33 ec       	ldi	r19, 0xC3	; 195
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	48 ec       	ldi	r20, 0xC8	; 200
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	ca 01       	movw	r24, r20
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <time_slide+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	21 50       	subi	r18, 0x01	; 1
     e96:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e98:	d1 f7       	brne	.-12     	; 0xe8e <time_slide+0xcc>
_delay_ms(5000);
char_slide_out_fall(max_col,h1,pos1,h2,pos2,':',colon,m1,pos3,m2,pos4);
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <time_slide+0xda>
     e9c:	ed b7       	in	r30, 0x3d	; 61
     e9e:	fe b7       	in	r31, 0x3e	; 62
     ea0:	91 82       	std	Z+1, r9	; 0x01
     ea2:	d2 82       	std	Z+2, r13	; 0x02
     ea4:	81 2f       	mov	r24, r17
     ea6:	6f 2d       	mov	r22, r15
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	25 2d       	mov	r18, r5
     eac:	07 e0       	ldi	r16, 0x07	; 7
     eae:	7a e3       	ldi	r23, 0x3A	; 58
     eb0:	e7 2e       	mov	r14, r23
     eb2:	cb 2c       	mov	r12, r11
     eb4:	a6 2c       	mov	r10, r6
     eb6:	87 2c       	mov	r8, r7
     eb8:	0e 94 54 06 	call	0xca8	; 0xca8 <char_slide_out_fall>
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
}
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	bf 90       	pop	r11
     ece:	af 90       	pop	r10
     ed0:	9f 90       	pop	r9
     ed2:	8f 90       	pop	r8
     ed4:	7f 90       	pop	r7
     ed6:	6f 90       	pop	r6
     ed8:	5f 90       	pop	r5
     eda:	08 95       	ret

00000edc <date_slide>:

void date_slide(uint8_t dd, uint8_t mm){
     edc:	4f 92       	push	r4
     ede:	5f 92       	push	r5
     ee0:	6f 92       	push	r6
     ee2:	7f 92       	push	r7
     ee4:	8f 92       	push	r8
     ee6:	af 92       	push	r10
     ee8:	cf 92       	push	r12
     eea:	ef 92       	push	r14
     eec:	ff 92       	push	r15
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	48 2f       	mov	r20, r24
     ef8:	26 2f       	mov	r18, r22
uint8_t d1=(dd/10)+48;uint8_t d2=(dd%10)+48;
     efa:	6a e0       	ldi	r22, 0x0A	; 10
     efc:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     f00:	a0 e3       	ldi	r26, 0x30	; 48
     f02:	fa 2e       	mov	r15, r26
     f04:	f8 0e       	add	r15, r24
     f06:	84 2f       	mov	r24, r20
     f08:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     f0c:	19 2f       	mov	r17, r25
     f0e:	10 5d       	subi	r17, 0xD0	; 208
char_slide_in_fall(5,d1,0,d2,6,pgm_read_byte(&(mnth[mm][0])),15,pgm_read_byte(&(mnth[mm][1])),21,pgm_read_byte(&(mnth[mm][2])),27);
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	28 9f       	mul	r18, r24
     f14:	90 01       	movw	r18, r0
     f16:	11 24       	eor	r1, r1
     f18:	f8 e6       	ldi	r31, 0x68	; 104
     f1a:	4f 2e       	mov	r4, r31
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	5f 2e       	mov	r5, r31
     f20:	42 0e       	add	r4, r18
     f22:	53 1e       	adc	r5, r19
     f24:	f2 01       	movw	r30, r4
     f26:	e4 90       	lpm	r14, Z+
     f28:	e9 e6       	ldi	r30, 0x69	; 105
     f2a:	6e 2e       	mov	r6, r30
     f2c:	e0 e0       	ldi	r30, 0x00	; 0
     f2e:	7e 2e       	mov	r7, r30
     f30:	62 0e       	add	r6, r18
     f32:	73 1e       	adc	r7, r19
     f34:	f3 01       	movw	r30, r6
     f36:	a4 90       	lpm	r10, Z+
     f38:	e9 01       	movw	r28, r18
     f3a:	c6 59       	subi	r28, 0x96	; 150
     f3c:	df 4f       	sbci	r29, 0xFF	; 255
     f3e:	fe 01       	movw	r30, r28
     f40:	84 91       	lpm	r24, Z+
     f42:	00 d0       	rcall	.+0      	; 0xf44 <date_slide+0x68>
     f44:	ed b7       	in	r30, 0x3d	; 61
     f46:	fe b7       	in	r31, 0x3e	; 62
     f48:	81 83       	std	Z+1, r24	; 0x01
     f4a:	8b e1       	ldi	r24, 0x1B	; 27
     f4c:	82 83       	std	Z+2, r24	; 0x02
     f4e:	85 e0       	ldi	r24, 0x05	; 5
     f50:	6f 2d       	mov	r22, r15
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	21 2f       	mov	r18, r17
     f56:	06 e0       	ldi	r16, 0x06	; 6
     f58:	7f e0       	ldi	r23, 0x0F	; 15
     f5a:	c7 2e       	mov	r12, r23
     f5c:	55 e1       	ldi	r21, 0x15	; 21
     f5e:	85 2e       	mov	r8, r21
     f60:	0e 94 5c 05 	call	0xab8	; 0xab8 <char_slide_in_fall>
     f64:	28 e5       	ldi	r18, 0x58	; 88
     f66:	3b e1       	ldi	r19, 0x1B	; 27
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	48 ec       	ldi	r20, 0xC8	; 200
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	ca 01       	movw	r24, r20
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <date_slide+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	d1 f7       	brne	.-12     	; 0xf70 <date_slide+0x94>
_delay_ms(700);
char_slide_out_fall(5,d1,0,d2,6,pgm_read_byte(&(mnth[mm][0])),15,pgm_read_byte(&(mnth[mm][1])),21,pgm_read_byte(&(mnth[mm][2])),27);
     f7c:	f2 01       	movw	r30, r4
     f7e:	e4 90       	lpm	r14, Z+
     f80:	f3 01       	movw	r30, r6
     f82:	a4 90       	lpm	r10, Z+
     f84:	fe 01       	movw	r30, r28
     f86:	84 91       	lpm	r24, Z+
     f88:	00 d0       	rcall	.+0      	; 0xf8a <date_slide+0xae>
     f8a:	ed b7       	in	r30, 0x3d	; 61
     f8c:	fe b7       	in	r31, 0x3e	; 62
     f8e:	81 83       	std	Z+1, r24	; 0x01
     f90:	8b e1       	ldi	r24, 0x1B	; 27
     f92:	82 83       	std	Z+2, r24	; 0x02
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	6f 2d       	mov	r22, r15
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	21 2f       	mov	r18, r17
     f9c:	06 e0       	ldi	r16, 0x06	; 6
     f9e:	3f e0       	ldi	r19, 0x0F	; 15
     fa0:	c3 2e       	mov	r12, r19
     fa2:	95 e1       	ldi	r25, 0x15	; 21
     fa4:	89 2e       	mov	r8, r25
     fa6:	0e 94 54 06 	call	0xca8	; 0xca8 <char_slide_out_fall>
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	cf 90       	pop	r12
     fbc:	af 90       	pop	r10
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	08 95       	ret

00000fca <temp_slide>:

void temp_slide(uint8_t temp, uint8_t offset){
     fca:	6f 92       	push	r6
     fcc:	7f 92       	push	r7
     fce:	8f 92       	push	r8
     fd0:	9f 92       	push	r9
     fd2:	af 92       	push	r10
     fd4:	bf 92       	push	r11
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	28 2f       	mov	r18, r24
     fe4:	16 2f       	mov	r17, r22
uint8_t t1=(temp/10)+48;uint8_t t2=(temp%10)+48;
     fe6:	6a e0       	ldi	r22, 0x0A	; 10
     fe8:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     fec:	f0 e3       	ldi	r31, 0x30	; 48
     fee:	7f 2e       	mov	r7, r31
     ff0:	78 0e       	add	r7, r24
     ff2:	82 2f       	mov	r24, r18
     ff4:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodqi4>
     ff8:	e0 e3       	ldi	r30, 0x30	; 48
     ffa:	de 2e       	mov	r13, r30
     ffc:	d9 0e       	add	r13, r25
char_slide_in_fall(5,t1,offset,t2,6+offset,123,12+offset,'C',17+offset,' ',23+offset);
     ffe:	76 e0       	ldi	r23, 0x06	; 6
    1000:	b7 2e       	mov	r11, r23
    1002:	b1 0e       	add	r11, r17
    1004:	6c e0       	ldi	r22, 0x0C	; 12
    1006:	96 2e       	mov	r9, r22
    1008:	91 0e       	add	r9, r17
    100a:	51 e1       	ldi	r21, 0x11	; 17
    100c:	65 2e       	mov	r6, r21
    100e:	61 0e       	add	r6, r17
    1010:	47 e1       	ldi	r20, 0x17	; 23
    1012:	f4 2e       	mov	r15, r20
    1014:	f1 0e       	add	r15, r17
    1016:	00 d0       	rcall	.+0      	; 0x1018 <temp_slide+0x4e>
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	ed b7       	in	r30, 0x3d	; 61
    101c:	fe b7       	in	r31, 0x3e	; 62
    101e:	81 83       	std	Z+1, r24	; 0x01
    1020:	f2 82       	std	Z+2, r15	; 0x02
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	67 2d       	mov	r22, r7
    1026:	41 2f       	mov	r20, r17
    1028:	2d 2d       	mov	r18, r13
    102a:	0b 2d       	mov	r16, r11
    102c:	3b e7       	ldi	r19, 0x7B	; 123
    102e:	e3 2e       	mov	r14, r19
    1030:	c9 2c       	mov	r12, r9
    1032:	93 e4       	ldi	r25, 0x43	; 67
    1034:	a9 2e       	mov	r10, r25
    1036:	86 2c       	mov	r8, r6
    1038:	0e 94 5c 05 	call	0xab8	; 0xab8 <char_slide_in_fall>
    103c:	28 e5       	ldi	r18, 0x58	; 88
    103e:	3b e1       	ldi	r19, 0x1B	; 27
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	48 ec       	ldi	r20, 0xC8	; 200
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	ca 01       	movw	r24, r20
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <temp_slide+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	21 50       	subi	r18, 0x01	; 1
    1050:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1052:	d1 f7       	brne	.-12     	; 0x1048 <temp_slide+0x7e>
_delay_ms(700);
char_slide_out_fall(5,t1,offset,t2,6+offset,123,12+offset,'C',17+offset,' ',23+offset);
    1054:	00 d0       	rcall	.+0      	; 0x1056 <temp_slide+0x8c>
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	ed b7       	in	r30, 0x3d	; 61
    105a:	fe b7       	in	r31, 0x3e	; 62
    105c:	81 83       	std	Z+1, r24	; 0x01
    105e:	f2 82       	std	Z+2, r15	; 0x02
    1060:	85 e0       	ldi	r24, 0x05	; 5
    1062:	67 2d       	mov	r22, r7
    1064:	41 2f       	mov	r20, r17
    1066:	2d 2d       	mov	r18, r13
    1068:	0b 2d       	mov	r16, r11
    106a:	1b e7       	ldi	r17, 0x7B	; 123
    106c:	e1 2e       	mov	r14, r17
    106e:	c9 2c       	mov	r12, r9
    1070:	b3 e4       	ldi	r27, 0x43	; 67
    1072:	ab 2e       	mov	r10, r27
    1074:	86 2c       	mov	r8, r6
    1076:	0e 94 54 06 	call	0xca8	; 0xca8 <char_slide_out_fall>
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
}
    107e:	1f 91       	pop	r17
    1080:	0f 91       	pop	r16
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	bf 90       	pop	r11
    108c:	af 90       	pop	r10
    108e:	9f 90       	pop	r9
    1090:	8f 90       	pop	r8
    1092:	7f 90       	pop	r7
    1094:	6f 90       	pop	r6
    1096:	08 95       	ret

00001098 <main>:

int main(void){
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17

spi_init();
    10a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <spi_init>
display_init();
    10a6:	0e 94 23 04 	call	0x846	; 0x846 <display_init>


RTC_Start(93900,170920);
    10aa:	6c ec       	ldi	r22, 0xCC	; 204
    10ac:	7e e6       	ldi	r23, 0x6E	; 110
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	28 ea       	ldi	r18, 0xA8	; 168
    10b4:	3b e9       	ldi	r19, 0x9B	; 155
    10b6:	42 e0       	ldi	r20, 0x02	; 2
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <RTC_Start>
    10be:	88 ee       	ldi	r24, 0xE8	; 232
    10c0:	93 e0       	ldi	r25, 0x03	; 3
    10c2:	28 ec       	ldi	r18, 0xC8	; 200
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	f9 01       	movw	r30, r18
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	d9 f7       	brne	.-10     	; 0x10c6 <main+0x2e>

_delay_ms(100);

while(1){
          int hh=(RTC_TR/3600);
    10d0:	60 91 0e 01 	lds	r22, 0x010E
    10d4:	70 91 0f 01 	lds	r23, 0x010F
    10d8:	80 91 10 01 	lds	r24, 0x0110
    10dc:	90 91 11 01 	lds	r25, 0x0111
		  int mm=(RTC_TR/60)%60;
    10e0:	e0 90 0e 01 	lds	r14, 0x010E
    10e4:	f0 90 0f 01 	lds	r15, 0x010F
    10e8:	00 91 10 01 	lds	r16, 0x0110
    10ec:	10 91 11 01 	lds	r17, 0x0111
		  time_slide(hh,mm,0);
    10f0:	20 e1       	ldi	r18, 0x10	; 16
    10f2:	3e e0       	ldi	r19, 0x0E	; 14
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
    10fc:	d2 2e       	mov	r13, r18
    10fe:	c8 01       	movw	r24, r16
    1100:	b7 01       	movw	r22, r14
    1102:	2c e3       	ldi	r18, 0x3C	; 60
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
    110e:	ca 01       	movw	r24, r20
    1110:	b9 01       	movw	r22, r18
    1112:	2c e3       	ldi	r18, 0x3C	; 60
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	0e 94 c7 08 	call	0x118e	; 0x118e <__udivmodsi4>
    111e:	8d 2d       	mov	r24, r13
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <time_slide>
		  date_slide(19,9);
    1126:	83 e1       	ldi	r24, 0x13	; 19
    1128:	69 e0       	ldi	r22, 0x09	; 9
    112a:	0e 94 6e 07 	call	0xedc	; 0xedc <date_slide>
		  temp_slide(31,5);
    112e:	8f e1       	ldi	r24, 0x1F	; 31
    1130:	65 e0       	ldi	r22, 0x05	; 5
    1132:	0e 94 e5 07 	call	0xfca	; 0xfca <temp_slide>
    1136:	cc cf       	rjmp	.-104    	; 0x10d0 <main+0x38>

00001138 <__mulsi3>:
    1138:	62 9f       	mul	r22, r18
    113a:	d0 01       	movw	r26, r0
    113c:	73 9f       	mul	r23, r19
    113e:	f0 01       	movw	r30, r0
    1140:	82 9f       	mul	r24, r18
    1142:	e0 0d       	add	r30, r0
    1144:	f1 1d       	adc	r31, r1
    1146:	64 9f       	mul	r22, r20
    1148:	e0 0d       	add	r30, r0
    114a:	f1 1d       	adc	r31, r1
    114c:	92 9f       	mul	r25, r18
    114e:	f0 0d       	add	r31, r0
    1150:	83 9f       	mul	r24, r19
    1152:	f0 0d       	add	r31, r0
    1154:	74 9f       	mul	r23, r20
    1156:	f0 0d       	add	r31, r0
    1158:	65 9f       	mul	r22, r21
    115a:	f0 0d       	add	r31, r0
    115c:	99 27       	eor	r25, r25
    115e:	72 9f       	mul	r23, r18
    1160:	b0 0d       	add	r27, r0
    1162:	e1 1d       	adc	r30, r1
    1164:	f9 1f       	adc	r31, r25
    1166:	63 9f       	mul	r22, r19
    1168:	b0 0d       	add	r27, r0
    116a:	e1 1d       	adc	r30, r1
    116c:	f9 1f       	adc	r31, r25
    116e:	bd 01       	movw	r22, r26
    1170:	cf 01       	movw	r24, r30
    1172:	11 24       	eor	r1, r1
    1174:	08 95       	ret

00001176 <__udivmodqi4>:
    1176:	99 1b       	sub	r25, r25
    1178:	79 e0       	ldi	r23, 0x09	; 9
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__udivmodqi4_ep>

0000117c <__udivmodqi4_loop>:
    117c:	99 1f       	adc	r25, r25
    117e:	96 17       	cp	r25, r22
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__udivmodqi4_ep>
    1182:	96 1b       	sub	r25, r22

00001184 <__udivmodqi4_ep>:
    1184:	88 1f       	adc	r24, r24
    1186:	7a 95       	dec	r23
    1188:	c9 f7       	brne	.-14     	; 0x117c <__udivmodqi4_loop>
    118a:	80 95       	com	r24
    118c:	08 95       	ret

0000118e <__udivmodsi4>:
    118e:	a1 e2       	ldi	r26, 0x21	; 33
    1190:	1a 2e       	mov	r1, r26
    1192:	aa 1b       	sub	r26, r26
    1194:	bb 1b       	sub	r27, r27
    1196:	fd 01       	movw	r30, r26
    1198:	0d c0       	rjmp	.+26     	; 0x11b4 <__udivmodsi4_ep>

0000119a <__udivmodsi4_loop>:
    119a:	aa 1f       	adc	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	ee 1f       	adc	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	a2 17       	cp	r26, r18
    11a4:	b3 07       	cpc	r27, r19
    11a6:	e4 07       	cpc	r30, r20
    11a8:	f5 07       	cpc	r31, r21
    11aa:	20 f0       	brcs	.+8      	; 0x11b4 <__udivmodsi4_ep>
    11ac:	a2 1b       	sub	r26, r18
    11ae:	b3 0b       	sbc	r27, r19
    11b0:	e4 0b       	sbc	r30, r20
    11b2:	f5 0b       	sbc	r31, r21

000011b4 <__udivmodsi4_ep>:
    11b4:	66 1f       	adc	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	1a 94       	dec	r1
    11be:	69 f7       	brne	.-38     	; 0x119a <__udivmodsi4_loop>
    11c0:	60 95       	com	r22
    11c2:	70 95       	com	r23
    11c4:	80 95       	com	r24
    11c6:	90 95       	com	r25
    11c8:	9b 01       	movw	r18, r22
    11ca:	ac 01       	movw	r20, r24
    11cc:	bd 01       	movw	r22, r26
    11ce:	cf 01       	movw	r24, r30
    11d0:	08 95       	ret

000011d2 <_exit>:
    11d2:	f8 94       	cli

000011d4 <__stop_program>:
    11d4:	ff cf       	rjmp	.-2      	; 0x11d4 <__stop_program>
